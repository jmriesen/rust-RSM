* Project Goals.
  The goal of this project is for me (Jacob Riesen) to practice and try out programming techniques on a non-trivial code base.
  The non-trivial code base I chose is the [[https://gitlab.com/Reference-Standard-M/rsm][Reference Standard M]] implementation maintained by David Wicksell.
** Why RSM? 
   I have always found language design interesting. 
   When I learned M at work I thought it seemed like a "simple" language and wondered if I could write an interpreter for it.
   I quickly realized that M was not as simple as I assumed, especially when I started to try and add indirection and goto support to my half baked interpreter.
   Eventually I ended up poking around online looking at how other interpreters worked and found RSM.
   On a whim I started trying to convert some of the code to rust, and after a while the project became the main code base I would use to try stuff out.
* Project structure
** [[./ffi/][ffi]] 
   The purpose of this create is to store/manage the ordinal C code from RSM.
   This crate is responsible for 
   - Building the C code
   - Generating the ffi struct and function definitions
   - Exposing an Unsafe API to the C code.
   - Exposing a Safe API to the C code
*** Safe API considerations
   Most of the other crates use the unsafe API currently, but I would like to move towards only exposing a safe API.
**** Concurrency considerations
     The original RSM code was a single threaded/multi process application. 
     Because of this there are many references to global variables without any sort of synchronization control.
     (If there is only one thread there is no reason to invoke the over head of a Mutex)

     Rust by default runs all of its unit test in parallel (multi-threaded) so care has to be taken whenever the Rust unit tests call out to C in order to avoid race conditions.

     Additionally C uses a shared memory segment to manage cross process communication.

**** Type considerations
     There are of course all the normal C vs Rust type considerations.

     However in addition to that the C code makes heavy use of un-sized types and quasi self references types.

****** Dynamically sized types
     One fairly common dynamically sized type used in the C code is the CSTRING.
     The Strut definition claims to hold a [u_char;65535] however in practice that is only the max size for this type.
     If the string is smaller then 65535 bytes (most of the time) then the C code only allocates enough space to hold the string.

     Rust does have a way of creating dynamically sized types, but I have not explored that yet.

****** Quisi Self References 
       Self references in Rust are hard since unless you use the Pin type, rust assumes that everything can be moved.
       Fortunately the C types are only kind of self referential.
       They frequently assume that type A will be immediately followed by type B.
       So we end up with the logical composite type AB, which is impotent for understanding the C code.
       Fortunately this is mostly just a logical construction, and as long as you are aware that this is happening it is fairly easy to spot in the C code, and deal with in the Rust rewrite.

** [[./tree-sitter-M][tree-sitter-m]]
   For this project I have chosen to use a [[https://tree-sitter.github.io/tree-sitter/][tree-sitter]] parser.
   - Uses JavaScript to specify the Grammar.
   - Uses an External Scanner to deal with indentation.
   - Runs the tree-sitter cli
   - Generates
     - A C library that contains the parser
     - A Rust crate that wraps that C library.
     - A [[./tree-sitter-M/src/node-types.json][node-types.json]] file that describes the Grammars structure.
** [[./lang-model/][language model]]
   This crate stores the rust types wrappers for each of the notes in the M grammar.
   The [[./lang-model/src/models.rs]] file is generated from the [[./tree-sitter-M/src/node-types.json][node-types.json]] using a separate personal project.
** [[./compiler/][Compiler]]
   This crate takes the AST provided by the lang-model and converts it into byte code.

   This is some regards is the "root" crate. Before I started splitting up the project into multiple crates everything lived in here. As such there are still a number lingering artifacts, type defs/impls that really don't belong in this crate, but still live there since I have not gotten around to cleaning them up.

   Additionally I did not yet understand how the shared memory segment worked when writing most of this crate.
   So most of it just pretends that the global in the shared memory segment don't exist.
** [[./interpreter/][Interpreter]]
   This create is going to store the actual interpreter binary.
   Currently the crate is responsible for 
   - creating a database file
   - setting up the shared memory segment
   - symbol table

     In the future I will probably end up splitting out the shared memory segment out into its own crate.
     The compiler will eventually need access to the shared memory segment. 

** [[./lang-server][Language Server]]
   This is a language server for M.
   This was a spur of the moment weekend project, and more or less only gives you some basic syntax highlighting/error detection.
   I think there are a lot of neat things you could do with a language server, but I will need a better grip on how the interpreter as a whole works before I can do any of them safely.

   Future feature idea
   - Find all assumed variables and indirection calls.
     One of the biggest roadblocks as I see to refactoring in M is the dynamic scoping of variables.
     Dynamic scoping makes it vary difficult to locally reason about renaming variables.
     To do most forms of static analyzes I will need a framework for tracking both of these.
   - Renaming Variables
   - Find all references
   - Lint for unused and assumed variables
   - Extract Method 
   - Introduce package scoping
* Techniques/Concepts 
** Mutation testing
*** Concept Overview:

   Mutation testing is a technique to check how well a test suite defines the behavior of codebase.
   This is accomplished by introducing mutations.
   If the mutated code can still past the test suit, then the tests are not fully specifying the systems behavior.[fn::It is possible for a mutation to not change systems behavior, but I think this should be fairly rare.]
   The main downside to mutation testing is that it takes time to run. 
   For each mutation we may have to run the entire test suite. 

*** How it is used in this project
    I am currently trying out [[https://mutants.rs/][cargo-mutants]], and plan to run it whenever I have compleated a large chunk of code/feature.
    Using the --file flag allows me to restrict where the mutations are being generated which significantly speeds up testing. 


*** General thoughts on the Mutation Testing
    Mutation testing is a low effort way of increasing my confidence in my test suite.
    The first time I ran it I ended up finding a bug in my test code that would have been impossible to detect using traditional unit testing.
** Foreign Function Interface 
   Since I don't want to convert the entirety of this project at once.
   I need a way for my Rust code to call C and for C to call Rust.
   Fortunately this is relatively easy in Rust due to the bindgen and cbindgen crates.
   Those to crates provide the pluming necessary for my build script to create and read header files.

   The harder task with ffi is creating a safe abstraction around the C code.
   All ffi calls are inherently Unsafe since the Rust compiler dose not preform static analyzes on the foreign code, and therefore can't grantee it is memory safe.
   So the programmer is required to go though and insure guaranties rust expects are being upheld.

   For this project specifically that mostly means 
   - Be careful to adhere to the structure of the C structs,
       For example types like CSTRING are un-sized type in the original C code, however rust strut definition that is generated is sized.
   - Pay extra attention to pointers/ pointer arithmetic.
       The C code sometimes allocates memory for multiple structs of different types at once.
       This is particularly prominent in the shared memory segment.
   - Single thread all the C code.
       The C cade uses a lot of global variables, and since it assumes it is single threaded there are no syncronization guards in place. (Atomics, Mutexs ext)
       However rust unit tests are multi threaded. This can easily lead to race condition during AB testing,  
       Most of my code requires grabbing some sort of Mutex lock before calling into C code.[fn::how this is enforced is vary inconsistent at the moment. I would like to develop a more holistic approach to this issue] 


** Goals of Testing
   I see tests as having two main goals.
*** Documenting how the code should behave.
    Tests ideally should reflect the minimum use case for some unit of code.[fn::function, class, modal ext]
    - how it is initialized
    - how it is evoked
    - what behavior to expect
    This means that[fn::ideally] tests do not refer to private fields or methods.
    If there is some behavior that is impotent for the calling code to know about, *but* the public API offer a way to observe that behavior, you may need to re think your design.

*** Specifying the behavior of a system.
    Before refactoring code you first need to understand what that code is doing.[fn::ideally you want to understand how and why as well but that is sometimes harder to figure out.]
    Refactoring by definition means changing the structure of code *without changing its behavior*.
    Can you refactor without tests?... Yes however it is a significantly more error prone and nerve racking process.

*** Non-Goal Testing how code works.
    Internal implementation details should not be directly tested.
    If, the calling code needs to know *how* some *internal* implementation detail happened, then you are dealing with a bad abstraction. 
    This is not the end of the world, but is definitely not a preferred state.


** A/B Testing
   Since this project is a rewrite, the original RSM implementation defines the expected behavior of the new code.
   If I find a bug in the original implementation I will replicate that bug's behavior until the it is fixed upstream.[fn::So far this has only happened once [[https://gitlab.com/Reference-Standard-M/rsm/-/issues/7]]]

   On one hand this makes testing vary easy, just A/B test everything.
   And you will find a lot of A/B testing in this project, however I would like to get away from using A/B testing as my primary testing strategy.
   It feels artificial, since in most real world projects I will not have a second implementation to test against.

   Going forward I want A/B test to primarily be used as a check of my test writing ability. 


